!_TAG_EXTRA_DESCRIPTION	anonymous	/Include tags for non-named objects like lambda/
!_TAG_EXTRA_DESCRIPTION	fileScope	/Include tags of file scope/
!_TAG_EXTRA_DESCRIPTION	pseudo	/Include pseudo tags/
!_TAG_EXTRA_DESCRIPTION	subparser	/Include tags generated by subparsers/
!_TAG_FIELD_DESCRIPTION	epoch	/the last modified time of the input file (only for F\/file kind tag)/
!_TAG_FIELD_DESCRIPTION	file	/File-restricted scoping/
!_TAG_FIELD_DESCRIPTION	input	/input file/
!_TAG_FIELD_DESCRIPTION	name	/tag name/
!_TAG_FIELD_DESCRIPTION	pattern	/pattern/
!_TAG_FIELD_DESCRIPTION	typeref	/Type and name of a variable or typedef/
!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_KIND_DESCRIPTION!D	M,module	/modules/
!_TAG_KIND_DESCRIPTION!D	T,template	/templates/
!_TAG_KIND_DESCRIPTION!D	V,version	/version statements/
!_TAG_KIND_DESCRIPTION!D	X,mixin	/mixins/
!_TAG_KIND_DESCRIPTION!D	a,alias	/aliases/
!_TAG_KIND_DESCRIPTION!D	c,class	/classes/
!_TAG_KIND_DESCRIPTION!D	e,enumerator	/enumerators (values inside an enumeration)/
!_TAG_KIND_DESCRIPTION!D	f,function	/function definitions/
!_TAG_KIND_DESCRIPTION!D	g,enum	/enumeration names/
!_TAG_KIND_DESCRIPTION!D	i,interface	/interfaces/
!_TAG_KIND_DESCRIPTION!D	m,member	/class, struct, and union members/
!_TAG_KIND_DESCRIPTION!D	n,namespace	/namespaces/
!_TAG_KIND_DESCRIPTION!D	s,struct	/structure names/
!_TAG_KIND_DESCRIPTION!D	u,union	/union names/
!_TAG_KIND_DESCRIPTION!D	v,variable	/variable definitions/
!_TAG_KIND_DESCRIPTION!JSON	a,array	/arrays/
!_TAG_KIND_DESCRIPTION!JSON	b,boolean	/booleans/
!_TAG_KIND_DESCRIPTION!JSON	n,number	/numbers/
!_TAG_KIND_DESCRIPTION!JSON	o,object	/objects/
!_TAG_KIND_DESCRIPTION!JSON	s,string	/strings/
!_TAG_KIND_DESCRIPTION!JSON	z,null	/nulls/
!_TAG_KIND_DESCRIPTION!Rust	C,constant	/A constant/
!_TAG_KIND_DESCRIPTION!Rust	M,macro	/Macro Definition/
!_TAG_KIND_DESCRIPTION!Rust	P,method	/A method/
!_TAG_KIND_DESCRIPTION!Rust	c,implementation	/implementation/
!_TAG_KIND_DESCRIPTION!Rust	e,enumerator	/An enum variant/
!_TAG_KIND_DESCRIPTION!Rust	f,function	/Function/
!_TAG_KIND_DESCRIPTION!Rust	g,enum	/Enum/
!_TAG_KIND_DESCRIPTION!Rust	i,interface	/trait interface/
!_TAG_KIND_DESCRIPTION!Rust	m,field	/A struct field/
!_TAG_KIND_DESCRIPTION!Rust	n,module	/module/
!_TAG_KIND_DESCRIPTION!Rust	s,struct	/structural type/
!_TAG_KIND_DESCRIPTION!Rust	t,typedef	/Type Alias/
!_TAG_KIND_DESCRIPTION!Rust	v,variable	/Global variable/
!_TAG_OUTPUT_EXCMD	mixed	/number, pattern, mixed, or combineV2/
!_TAG_OUTPUT_FILESEP	slash	/slash or backslash/
!_TAG_OUTPUT_MODE	u-ctags	/u-ctags or e-ctags/
!_TAG_OUTPUT_VERSION	0.0	/current.age/
!_TAG_PARSER_VERSION!D	0.0	/current.age/
!_TAG_PARSER_VERSION!JSON	0.0	/current.age/
!_TAG_PARSER_VERSION!Rust	0.0	/current.age/
!_TAG_PATTERN_LENGTH_LIMIT	96	/0 for no limit/
!_TAG_PROC_CWD	/home/goren/Code/skylang/	//
!_TAG_PROGRAM_AUTHOR	Universal Ctags Team	//
!_TAG_PROGRAM_NAME	Universal Ctags	/Derived from Exuberant Ctags/
!_TAG_PROGRAM_URL	https://ctags.io/	/official site/
!_TAG_PROGRAM_VERSION	6.0.0	/p6.0.20221218.0/
0	target/debug/.fingerprint/skylang-2d34902ac17f98ba/test-bin-skylang.json	/^{"rustc":16895609601713598366,"features":"[]","target":5185372002992495166,"profile":18326522262/;"	o	array:local
0	target/debug/.fingerprint/skylang-615655681e1bc164/bin-skylang.json	/^{"rustc":16895609601713598366,"features":"[]","target":5185372002992495166,"profile":13126374248/;"	o	array:local
15729799797837862367	target/.rustc_info.json	/^{"rustc_fingerprint":8401154174455286909,"outputs":{"4614504638168534921":{"success":true,"statu/;"	o	object:outputs
4614504638168534921	target/.rustc_info.json	/^{"rustc_fingerprint":8401154174455286909,"outputs":{"4614504638168534921":{"success":true,"statu/;"	o	object:outputs
Bang	src/lex/tok.rs	/^    Bang,	\/\/ !$/;"	e	enum:TokenType
BangEqual	src/lex/tok.rs	/^    BangEqual,		\/\/ !=$/;"	e	enum:TokenType
Break	src/lex/tok.rs	/^    Break,	\/\/ break$/;"	e	enum:TokenType
CheckDepInfo	target/debug/.fingerprint/skylang-2d34902ac17f98ba/test-bin-skylang.json	/^{"rustc":16895609601713598366,"features":"[]","target":5185372002992495166,"profile":18326522262/;"	o	object:local.0
CheckDepInfo	target/debug/.fingerprint/skylang-615655681e1bc164/bin-skylang.json	/^{"rustc":16895609601713598366,"features":"[]","target":5185372002992495166,"profile":13126374248/;"	o	object:local.0
Colon	src/lex/tok.rs	/^    Colon,	\/\/ :$/;"	e	enum:TokenType
Comma	src/lex/tok.rs	/^    Comma,	\/\/ ,$/;"	e	enum:TokenType
Continue	src/lex/tok.rs	/^    Continue,	\/\/ continue$/;"	e	enum:TokenType
Dot	src/lex/tok.rs	/^    Dot,	\/\/ .$/;"	e	enum:TokenType
EOF	src/lex/tok.rs	/^    EOF,$/;"	e	enum:TokenType
Elif	src/lex/tok.rs	/^    Elif,	\/\/ elif$/;"	e	enum:TokenType
Else	src/lex/tok.rs	/^    Else,	\/\/ else$/;"	e	enum:TokenType
Equal	src/lex/tok.rs	/^    Equal,	\/\/ =$/;"	e	enum:TokenType
EqualEqual	src/lex/tok.rs	/^    EqualEqual,		\/\/ ==$/;"	e	enum:TokenType
Error	src/lex/tok.rs	/^    Error, \/\/ A syntax error.$/;"	e	enum:TokenType
False	src/lex/tok.rs	/^    False,	\/\/ false$/;"	e	enum:TokenType
Fn	src/lex/tok.rs	/^    Fn,		\/\/ fn$/;"	e	enum:TokenType
For	src/lex/tok.rs	/^    For,	\/\/ for$/;"	e	enum:TokenType
Greater	src/lex/tok.rs	/^    Greater,	\/\/ >$/;"	e	enum:TokenType
GreaterEqual	src/lex/tok.rs	/^    GreaterEqual,	\/\/ >=$/;"	e	enum:TokenType
Identifier	src/lex/tok.rs	/^    Identifier, \/\/ An identifier.$/;"	e	enum:TokenType
If	src/lex/tok.rs	/^    If,		\/\/ if$/;"	e	enum:TokenType
In	src/lex/tok.rs	/^    In,		\/\/ in$/;"	e	enum:TokenType
LeftBrace	src/lex/tok.rs	/^    LeftBrace,	\/\/ {$/;"	e	enum:TokenType
LeftParen	src/lex/tok.rs	/^    LeftParen,	\/\/ ($/;"	e	enum:TokenType
Less	src/lex/tok.rs	/^    Less,	\/\/ <$/;"	e	enum:TokenType
LessEqual	src/lex/tok.rs	/^    LessEqual,		\/\/ <=$/;"	e	enum:TokenType
Let	src/lex/tok.rs	/^    Let,	\/\/ let$/;"	e	enum:TokenType
Lexer	src/lex/tok.rs	/^impl<'a> From<&'a std::string::String> for Lexer<'a> {$/;"	c
Lexer	src/lex/tok.rs	/^impl<'a> From<&'a str> for Lexer<'a> {$/;"	c
Lexer	src/lex/tok.rs	/^impl<'a> Lexer<'a> {$/;"	c
Lexer	src/lex/tok.rs	/^pub struct Lexer<'a> {$/;"	s
Minus	src/lex/tok.rs	/^    Minus,	\/\/ -$/;"	e	enum:TokenType
Null	src/lex/tok.rs	/^    Null,	\/\/ None$/;"	e	enum:TokenType
Number	src/lex/tok.rs	/^    Number,	\/\/ An integer.$/;"	e	enum:TokenType
Percent	src/lex/tok.rs	/^    Percent,	\/\/ %$/;"	e	enum:TokenType
Plus	src/lex/tok.rs	/^    Plus,	\/\/ +$/;"	e	enum:TokenType
Return	src/lex/tok.rs	/^    Return,	\/\/ return$/;"	e	enum:TokenType
RightBrace	src/lex/tok.rs	/^    RightBrace, \/\/ }$/;"	e	enum:TokenType
RightParen	src/lex/tok.rs	/^    RightParen, \/\/ )$/;"	e	enum:TokenType
Semicolon	src/lex/tok.rs	/^    Semicolon,	\/\/ ;$/;"	e	enum:TokenType
Slash	src/lex/tok.rs	/^    Slash,	\/\/ \/$/;"	e	enum:TokenType
Star	src/lex/tok.rs	/^    Star,	\/\/ *$/;"	e	enum:TokenType
String	src/lex/tok.rs	/^    String,	\/\/ A string literal.$/;"	e	enum:TokenType
Token	src/lex/tok.rs	/^impl<'a> Token<'a> {$/;"	c
Token	src/lex/tok.rs	/^pub struct Token<'a> {$/;"	s
TokenType	src/lex/tok.rs	/^pub enum TokenType {$/;"	g
True	src/lex/tok.rs	/^    True,	\/\/ true$/;"	e	enum:TokenType
While	src/lex/tok.rs	/^    While,	\/\/ while$/;"	e	enum:TokenType
after	src/lex/tok.rs	/^    after: &'a str$/;"	m	struct:Lexer
check_single_char	src/lex/parse.rs	/^fn check_single_char<'a>(word: &'a str) -> Option<Token<'a>> {$/;"	f
code	target/.rustc_info.json	/^{"rustc_fingerprint":8401154174455286909,"outputs":{"4614504638168534921":{"success":true,"statu/;"	n	object:outputs.15729799797837862367
code	target/.rustc_info.json	/^{"rustc_fingerprint":8401154174455286909,"outputs":{"4614504638168534921":{"success":true,"statu/;"	n	object:outputs.4614504638168534921
compile_kind	target/debug/.fingerprint/skylang-2d34902ac17f98ba/test-bin-skylang.json	/^{"rustc":16895609601713598366,"features":"[]","target":5185372002992495166,"profile":18326522262/;"	n
compile_kind	target/debug/.fingerprint/skylang-615655681e1bc164/bin-skylang.json	/^{"rustc":16895609601713598366,"features":"[]","target":5185372002992495166,"profile":13126374248/;"	n
config	target/debug/.fingerprint/skylang-2d34902ac17f98ba/test-bin-skylang.json	/^{"rustc":16895609601713598366,"features":"[]","target":5185372002992495166,"profile":18326522262/;"	n
config	target/debug/.fingerprint/skylang-615655681e1bc164/bin-skylang.json	/^{"rustc":16895609601713598366,"features":"[]","target":5185372002992495166,"profile":13126374248/;"	n
current	src/lex/tok.rs	/^    current: usize,$/;"	m	struct:Lexer
dep_info	target/debug/.fingerprint/skylang-2d34902ac17f98ba/test-bin-skylang.json	/^{"rustc":16895609601713598366,"features":"[]","target":5185372002992495166,"profile":18326522262/;"	s	object:local.0.CheckDepInfo
dep_info	target/debug/.fingerprint/skylang-615655681e1bc164/bin-skylang.json	/^{"rustc":16895609601713598366,"features":"[]","target":5185372002992495166,"profile":13126374248/;"	s	object:local.0.CheckDepInfo
deps	target/debug/.fingerprint/skylang-2d34902ac17f98ba/test-bin-skylang.json	/^{"rustc":16895609601713598366,"features":"[]","target":5185372002992495166,"profile":18326522262/;"	a
deps	target/debug/.fingerprint/skylang-615655681e1bc164/bin-skylang.json	/^{"rustc":16895609601713598366,"features":"[]","target":5185372002992495166,"profile":13126374248/;"	a
empty	src/lex/tok.rs	/^    pub fn empty() -> Self {$/;"	P	implementation:Token
features	target/debug/.fingerprint/skylang-2d34902ac17f98ba/test-bin-skylang.json	/^{"rustc":16895609601713598366,"features":"[]","target":5185372002992495166,"profile":18326522262/;"	s
features	target/debug/.fingerprint/skylang-615655681e1bc164/bin-skylang.json	/^{"rustc":16895609601713598366,"features":"[]","target":5185372002992495166,"profile":13126374248/;"	s
from	src/lex/tok.rs	/^    fn from(value: &'a std::string::String) -> Self {$/;"	P	implementation:Lexer
from	src/lex/tok.rs	/^    fn from(value: &'a str) -> Self {$/;"	P	implementation:Lexer
lex	src/main.rs	/^pub mod lex;$/;"	n
local	target/debug/.fingerprint/skylang-2d34902ac17f98ba/test-bin-skylang.json	/^{"rustc":16895609601713598366,"features":"[]","target":5185372002992495166,"profile":18326522262/;"	a
local	target/debug/.fingerprint/skylang-615655681e1bc164/bin-skylang.json	/^{"rustc":16895609601713598366,"features":"[]","target":5185372002992495166,"profile":13126374248/;"	a
main	src/main.rs	/^fn main() {$/;"	f
metadata	target/debug/.fingerprint/skylang-2d34902ac17f98ba/test-bin-skylang.json	/^{"rustc":16895609601713598366,"features":"[]","target":5185372002992495166,"profile":18326522262/;"	n
metadata	target/debug/.fingerprint/skylang-615655681e1bc164/bin-skylang.json	/^{"rustc":16895609601713598366,"features":"[]","target":5185372002992495166,"profile":13126374248/;"	n
new	src/lex/tok.rs	/^    pub fn new(tt: TokenType, word: &'a str) -> Self {$/;"	P	implementation:Token
new	src/lex/tok.rs	/^   pub fn new() -> Self {$/;"	P	implementation:Lexer
outputs	target/.rustc_info.json	/^{"rustc_fingerprint":8401154174455286909,"outputs":{"4614504638168534921":{"success":true,"statu/;"	o
parse	src/lex/mod.rs	/^pub mod parse;$/;"	n
path	target/debug/.fingerprint/skylang-2d34902ac17f98ba/test-bin-skylang.json	/^{"rustc":16895609601713598366,"features":"[]","target":5185372002992495166,"profile":18326522262/;"	n
path	target/debug/.fingerprint/skylang-615655681e1bc164/bin-skylang.json	/^{"rustc":16895609601713598366,"features":"[]","target":5185372002992495166,"profile":13126374248/;"	n
profile	target/debug/.fingerprint/skylang-2d34902ac17f98ba/test-bin-skylang.json	/^{"rustc":16895609601713598366,"features":"[]","target":5185372002992495166,"profile":18326522262/;"	n
profile	target/debug/.fingerprint/skylang-615655681e1bc164/bin-skylang.json	/^{"rustc":16895609601713598366,"features":"[]","target":5185372002992495166,"profile":13126374248/;"	n
rustc	target/debug/.fingerprint/skylang-2d34902ac17f98ba/test-bin-skylang.json	/^{"rustc":16895609601713598366,"features":"[]","target":5185372002992495166,"profile":18326522262/;"	n
rustc	target/debug/.fingerprint/skylang-615655681e1bc164/bin-skylang.json	/^{"rustc":16895609601713598366,"features":"[]","target":5185372002992495166,"profile":13126374248/;"	n
rustc_fingerprint	target/.rustc_info.json	/^{"rustc_fingerprint":8401154174455286909,"outputs":{"4614504638168534921":{"success":true,"statu/;"	n
rustflags	target/debug/.fingerprint/skylang-2d34902ac17f98ba/test-bin-skylang.json	/^{"rustc":16895609601713598366,"features":"[]","target":5185372002992495166,"profile":18326522262/;"	a
rustflags	target/debug/.fingerprint/skylang-615655681e1bc164/bin-skylang.json	/^{"rustc":16895609601713598366,"features":"[]","target":5185372002992495166,"profile":13126374248/;"	a
source	src/lex/tok.rs	/^    source: &'a str,$/;"	m	struct:Lexer
status	target/.rustc_info.json	/^{"rustc_fingerprint":8401154174455286909,"outputs":{"4614504638168534921":{"success":true,"statu/;"	s	object:outputs.15729799797837862367
status	target/.rustc_info.json	/^{"rustc_fingerprint":8401154174455286909,"outputs":{"4614504638168534921":{"success":true,"statu/;"	s	object:outputs.4614504638168534921
stderr	target/.rustc_info.json	/^{"rustc_fingerprint":8401154174455286909,"outputs":{"4614504638168534921":{"success":true,"statu/;"	s	object:outputs.15729799797837862367
stderr	target/.rustc_info.json	/^{"rustc_fingerprint":8401154174455286909,"outputs":{"4614504638168534921":{"success":true,"statu/;"	s	object:outputs.4614504638168534921
stdout	target/.rustc_info.json	/^{"rustc_fingerprint":8401154174455286909,"outputs":{"4614504638168534921":{"success":true,"statu/;"	s	object:outputs.15729799797837862367
stdout	target/.rustc_info.json	/^{"rustc_fingerprint":8401154174455286909,"outputs":{"4614504638168534921":{"success":true,"statu/;"	s	object:outputs.4614504638168534921
success	target/.rustc_info.json	/^{"rustc_fingerprint":8401154174455286909,"outputs":{"4614504638168534921":{"success":true,"statu/;"	b	object:outputs.15729799797837862367
success	target/.rustc_info.json	/^{"rustc_fingerprint":8401154174455286909,"outputs":{"4614504638168534921":{"success":true,"statu/;"	b	object:outputs.4614504638168534921
successes	target/.rustc_info.json	/^{"rustc_fingerprint":8401154174455286909,"outputs":{"4614504638168534921":{"success":true,"statu/;"	o
target	target/debug/.fingerprint/skylang-2d34902ac17f98ba/test-bin-skylang.json	/^{"rustc":16895609601713598366,"features":"[]","target":5185372002992495166,"profile":18326522262/;"	n
target	target/debug/.fingerprint/skylang-615655681e1bc164/bin-skylang.json	/^{"rustc":16895609601713598366,"features":"[]","target":5185372002992495166,"profile":13126374248/;"	n
tok	src/lex/mod.rs	/^pub mod tok;$/;"	n
tok	src/lex/parse.rs	/^    macro_rules! tok {$/;"	M	function:check_single_char
tokens	src/lex/tok.rs	/^    tokens: Vec<Token<'a>>,$/;"	m	struct:Lexer
tt	src/lex/tok.rs	/^    tt: TokenType,$/;"	m	struct:Token
word	src/lex/tok.rs	/^    word: &'a str,$/;"	m	struct:Token
